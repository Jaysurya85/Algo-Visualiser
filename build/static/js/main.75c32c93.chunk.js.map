{"version":3,"sources":["Components/SortVisualization/ResetArray.js","Components/SortController/AnimationSpeed/AnimationSpeed.js","Components/SortController/SortController.js","Algorithms/BubbleSort.js","Components/SortVisualization/BubleSortAnimation.js","Algorithms/SelectionSort.js","Components/SortVisualization/SelectionSortAnimation.js","Algorithms/MergeSort.js","Components/SortVisualization/MergeSortAnimations.js","Algorithms/QuickSort.js","Components/SortVisualization/QuickSortAnimation.js","Components/SortVisualization/endAnimations.js","Containers/SortBuilder/SortBuilder.js","App.js","serviceWorker.js","index.js"],"names":["ResetArray","totalHeight","noOfBars","randArray","i","concat","Math","floor","random","AnimationSpeed","props","className","disabled","value","initual","onChange","changed","SortController","onClick","clicked","disableButtons","style","color","id","type","min","max","sliderchange","BubbleSortclicked","InsertonSortclicked","SelectionSortclicked","MergeSortclicked","QuickSortclicked","swap","auxillaryArray","a","b","temp","BubbleSort","array","animations","length","unsorted","N","j","push","Sorthelper","BubbleSortAnimation","animationSpeed","primarycolor","secondarycolor","sortedArray","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","newHeight","height","SelectionSort","sortHelper","SelectionSortAnimation","barIdx","MergeSort","slice","left","right","middle","k","Mergehelper","MergeSortAnimation","firstIndex","secondIndex","QuickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","QuickSortAnimation","isColorChange","Bars","barOneIndex","barTwoIndex","barIndex","barStyle","showsorted","animationsLength","barSytle","SortBuilder","state","disabledButtons","totalWidth","window","innerWidth","innerHeight","RandArray","ResetRandomArray","setState","Promise","resolve","then","EndAnimation","time","InsertionSort","InsertionSortAnimation","MegreSort","MergesortAnimation","changedHandler","event","newspeed","target","sliderchangeHandler","newvalue","this","map","index","key","width","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uUAYeA,G,MAXI,SAACC,EAAYC,GAK5B,IAJA,IAAIC,EAAY,GAIRC,EAAE,EAAEA,EAAEF,EAASE,IACnBD,EAAYA,EAAUE,OAAOC,KAAKC,MAAMD,KAAKE,UAAUP,EAAY,MAAM,KAE7E,OAAOE,ICQIM,G,YAdQ,SAACC,GACpB,OACI,4BAAQC,UAAU,iBAClBC,SAAUF,EAAME,SAChBC,MAAOH,EAAMI,QAASC,SAAUL,EAAMM,SAClC,4BAAQH,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,+BACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,OAAd,KACA,4BAAQA,MAAM,QAAd,gCC4BGI,EApCQ,SAACP,GAChB,OAAO,yBAAKC,UAAY,OACZ,4BAAQA,UAAY,QAAQO,QAAWR,EAAMS,QAASP,SAAUF,EAAMU,gBAAtE,eACA,yBAAKT,UAAU,kBACf,uBAAGU,MAAO,CAACC,MAAM,UAAjB,kBACA,kBAAC,EAAD,CACAV,SAAYF,EAAMU,eAClBJ,QAASN,EAAMM,QACfF,QAASJ,EAAMI,WAEf,yBAAKH,UAAU,kBACf,uBAAGU,MAAO,CAACC,MAAM,UAAjB,cACA,2BACAX,UAAW,QACXY,GAAG,aACHC,KAAK,QACLC,IAAI,KACJC,IAAI,MACJX,SAAUL,EAAMiB,aAChBf,SAAUF,EAAMU,iBAEhB,uBAAGC,MAAO,CAACC,MAAM,UAAWZ,EAAMG,QAGlC,6BACI,4BAAQF,UAAY,WAAWO,QAAWR,EAAMkB,kBAAmBhB,SAAUF,EAAMU,gBAAnF,cACA,4BAAQT,UAAY,WAAWO,QAAWR,EAAMmB,oBAAqBjB,SAAUF,EAAMU,gBAArF,kBACA,4BAAQT,UAAY,WAAWO,QAAWR,EAAMoB,qBAAsBlB,SAAUF,EAAMU,gBAAtF,kBACA,4BAAQT,UAAY,WAAWO,QAAWR,EAAMqB,iBAAkBnB,SAAUF,EAAMU,gBAAlF,cACA,4BAAQT,UAAY,WAAWO,QAAWR,EAAMsB,iBAAkBpB,SAAUF,EAAMU,gBAAlF,iBCJxB,SAASa,EAAKC,EAAgBC,EAAGC,GAC7B,IAAIC,EAAOH,EAAeC,GAC1BD,EAAeC,GAAKD,EAAeE,GACnCF,EAAeE,GAAKC,EAGTC,MAnCI,SAACC,GAChB,IAAIC,EAAa,GACjB,OAAID,EAAME,QAAU,EAAUF,GAKlC,SAAoBG,EAASF,GAEzB,IADA,IAAIG,EAAID,EAASD,OACTrC,EAAE,EAAEA,EAAEuC,EAAE,EAAEvC,IACd,IAAI,IAAIwC,EAAE,EAAEA,EAAED,EAAE,EAAEvC,EAAEwC,IAEhBJ,EAAWK,KAAK,CAACD,EAAEA,EAAE,IAErBJ,EAAWK,KAAK,CAACD,EAAEA,EAAE,IAClBF,EAASE,GAAGF,EAASE,EAAE,IACtBJ,EAAWK,KAAK,CAACD,EAAEF,EAASE,EAAE,KAC9BJ,EAAWK,KAAK,CAACD,EAAE,EAAEF,EAASE,KAC9BX,EAAKS,EAASE,EAAEA,EAAE,KAGlBJ,EAAWK,KAAK,EAAE,GAAG,IACrBL,EAAWK,KAAK,EAAE,GAAG,KAnBjCC,CAAWP,EAAOC,GACX,CAACA,EAAWD,KCkCJQ,EApCS,SAACR,EAAMS,EAAeC,EAAaC,GAAmB,IAE1E9C,EAFyE,EAC5CkC,EAAWC,GADiC,mBACtEC,EADsE,KAC3DW,EAD2D,kBAI3E,IAAMC,EAAOC,SAASC,uBAAuB,OAG7C,GADuBlD,EAAI,IAAM,GAAKA,EAAE,IAAK,EAC1B,CAAC,IAAD,cACaoC,EAAWpC,GADxB,GACVmD,EADU,KACAC,EADA,KAEXC,EAAcL,EAAKG,GAAWlC,MAC9BqC,EAAcN,EAAKI,GAAWnC,MAC9BC,EAAQlB,EAAI,IAAM,EAAI8C,EAAiBD,EAC7CU,YAAW,WACTF,EAAYG,gBAAkBtC,EAC9BoC,EAAYE,gBAAkBtC,IAC9BlB,EAAE4C,OAED,CAAC,IAAD,cAC4BR,EAAWpC,GADvC,GACImD,EADJ,KACeM,EADf,KAIH,IAAgB,IAAbN,EACD,iBAGAI,YAAW,WACWP,EAAKG,GAAWlC,MACxByC,OAAZ,UAAwBD,EAAxB,QACAzD,EAAE4C,KAzBV,IAAK5C,EAAI,EAAGA,EAAIoC,EAAWC,OAAQrC,IAAK,IA8BxC,MAAO,CAAC+C,EAAY/C,ICPxB,SAAS6B,EAAKM,EAAMJ,EAAEC,GAClB,IAAIC,EAAOE,EAAMJ,GACjBI,EAAMJ,GAAKI,EAAMH,GACjBG,EAAMH,GAAKC,EAgBA0B,MA/CO,SAACxB,GACnB,IAAIC,EAAc,GAClB,OAAGD,EAAME,QAAQ,EAASF,GAO9B,SAAoBA,EAAMC,GAEtB,IAAI,IAAIpC,EAAE,EAAEA,EAAEmC,EAAME,OAAO,EAAErC,IAAI,CAG7B,IADA,IAAIqB,EAAMrB,EACFwC,EAAExC,EAAE,EAAEwC,EAAEL,EAAME,OAAOG,IACtBxC,EAAE,GAAEoC,EAAWK,KAAK,CAAC,EAAEzC,EAAE,EAAEA,IAC9BoC,EAAWK,KAAK,CAAC,EAAED,EAAEnB,IACrBe,EAAWK,KAAK,CAAC,EAAED,EAAEnB,IACnBc,EAAMK,GAAGL,EAAMd,KACdA,EAAMmB,GAGbJ,EAAWK,KAAK,CAAC,EAAEzC,EAAEmC,EAAMd,KAC3Be,EAAWK,KAAK,CAAC,EAAEpB,EAAIc,EAAMnC,KAC7B6B,EAAKM,EAAMnC,EAAEqB,IArBjBuC,CAAWzB,EAAMC,GAGV,CAACA,EAAWD,KCqCR0B,EAzCgB,SAAC1B,EAAMS,EAAeC,EAAaC,GAAoB,IAE9E9C,EAF6E,EAChD2D,EAAcxB,GADkC,mBAC1EC,EAD0E,KAC/DW,EAD+D,kBAI/E,IAAMC,EAAOC,SAASC,uBAAuB,OACvCrB,EAAOO,EAAWpC,GAAG,GAI3B,GAAU,IAAP6B,EAAS,CACV,IAAMsB,EAAYf,EAAWpC,GAAG,GAC1BoD,EAAYhB,EAAWpC,GAAG,GAC1BqD,EAAcL,EAAKG,GAAWlC,MAC9BqC,EAAcN,EAAKI,GAAWnC,MACpCsC,YAAW,WACTF,EAAYG,gBAAkBX,EAC9BS,EAAYE,gBAAkB,WAC7BxD,EAAE4C,QAEF,GAAU,IAAPf,GAAmB,IAAPA,EAAS,CAAC,IAAD,cACUO,EAAWpC,GADrB,GACpBiC,EADoB,KACdkB,EADc,KACHC,EADG,KAErBC,EAAcL,EAAKG,GAAWlC,MAC9BqC,EAAcN,EAAKI,GAAWnC,MAC9BC,EAAiB,IAATe,EAAaa,EAAiBD,EAC5CU,YAAW,WACTF,EAAYG,gBAAkBtC,EAC9BoC,EAAYE,gBAAkBtC,IAC7BlB,EAAE4C,OAEH,CACF,IAAMkB,EAAS1B,EAAWpC,GAAG,GACvByD,EAAYrB,EAAWpC,GAAG,GAC5BuD,YAAW,WACQP,EAAKc,GAAQ7C,MACrByC,OAAT,UAAqBD,EAArB,QACCzD,EAAE4C,KAhCb,IAAI5C,EAAE,EAAEA,EAAEoC,EAAWC,OAAOrC,IAAK,IAmCjC,MAAO,CAAC+C,EAAY/C,ICQT+D,MAhDG,SAAC5B,GACjB,IAAIC,EAAa,GACjB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAWH,EAAM6B,QAEvB,OAGF,SAAStB,EAAWP,EAAM8B,EAAKC,EAAM5B,EAASF,GAC5C,GAAI6B,IAASC,EAAO,OACpB,IAAMC,EAASjE,KAAKC,OAAO8D,EAAOC,GAAS,GAC3CxB,EAAWJ,EAAU2B,EAAME,EAAQhC,EAAOC,GAC1CM,EAAWJ,EAAU6B,EAAS,EAAGD,EAAO/B,EAAOC,GAGjD,SAAqBD,EAAM8B,EAAKE,EAAOD,EAAM5B,EAASF,GACpD,IAAIgC,EAAIH,EACJjE,EAAIiE,EACJzB,EAAI2B,EAAS,EACjB,KAAOnE,GAAKmE,GAAU3B,GAAK0B,GAEzB9B,EAAWK,KAAK,CAACzC,EAAGwC,IAEpBJ,EAAWK,KAAK,CAACzC,EAAGwC,IAChBF,EAAStC,IAAMsC,EAASE,IAE1BJ,EAAWK,KAAK,CAAC2B,EAAG9B,EAAStC,KAC7BmC,EAAMiC,KAAO9B,EAAStC,OAGtBoC,EAAWK,KAAK,CAAC2B,EAAG9B,EAASE,KAC7BL,EAAMiC,KAAO9B,EAASE,MAG1B,KAAOxC,GAAKmE,GACV/B,EAAWK,KAAK,CAACzC,EAAGA,IACpBoC,EAAWK,KAAK,CAACzC,EAAGA,IACpBoC,EAAWK,KAAK,CAAC2B,EAAG9B,EAAStC,KAC7BmC,EAAMiC,KAAO9B,EAAStC,KAExB,KAAOwC,GAAK0B,GACV9B,EAAWK,KAAK,CAACD,EAAGA,IACpBJ,EAAWK,KAAK,CAACD,EAAGA,IACpBJ,EAAWK,KAAK,CAAC2B,EAAG9B,EAASE,KAC7BL,EAAMiC,KAAO9B,EAASE,KA/BxB6B,CAAYlC,EAAO8B,EAAME,EAAQD,EAAO5B,EAAUF,GATlDM,CAAWP,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAUF,GAC1C,CAACA,EAAWD,ICyBNmC,EA5BY,SAACnC,EAAMS,EAAeC,EAAaC,GAAoB,IAExE9C,EAFuE,EAC5C+D,EAAU5B,GADkC,mBACtEC,EADsE,KAC3DW,EAD2D,kBAIzE,IAAMC,EAAOC,SAASC,uBAAuB,OAE3C,GADoBlD,EAAI,IAAM,EACX,CAAC,IAAD,cACcoC,EAAWpC,GADzB,GACVmD,EADU,KACCC,EADD,KAEXC,EAAcL,EAAKG,GAAWlC,MAC9BqC,EAAcN,EAAKI,GAAWnC,MAC9BC,EAAQlB,EAAI,IAAM,EAAI8C,EAAiBD,EAC7CU,YAAW,WACTF,EAAYG,gBAAkBtC,EAC9BoC,EAAYE,gBAAkBtC,IAC7BlB,EAAE4C,OAEF,CAAC,IAAD,cACyBR,EAAWpC,GADpC,GACI8D,EADJ,KACYL,EADZ,KAEHF,YAAW,WACQP,EAAKc,GAAQ7C,MACrByC,OAAT,UAAqBD,EAArB,QACCzD,EAAE4C,KAlBX,IAAK5C,EAAI,EAAGA,EAAIoC,EAAWC,OAAQrC,IAAM,IAsB3C,MAAO,CAAC+C,EAAY/C,ICyBxB,SAAS6B,EAAKC,EAAgByC,EAAYC,GACtC,IAAIvC,EAAOH,EAAeyC,GAC1BzC,EAAeyC,GAAczC,EAAe0C,GAC5C1C,EAAe0C,GAAevC,EAiBnBwC,MAxEG,SAACtC,GACf,IAAIC,EAAc,GAMlB,OAKJ,SAASwB,EAAWzB,EAAOuC,EAAYC,EAAUvC,GAC7C,IAAIwC,EACAF,EAAaC,IACbC,EAMR,SAAwBzC,EAAOuC,EAAYC,EAAUvC,GAGjD,IAFA,IAAIyC,EAAQ1C,EAAMwC,GACdC,EAAaF,EACR1E,EAAI0E,EAAY1E,GAAK2E,EAAW,EAAG3E,IACxCoC,EAAWK,KAAK,CAACzC,EAAG2E,IACpBvC,EAAWK,KAAK,CAACzC,EAAG2E,IAChBxC,EAAMnC,IAAM6E,GAEZzC,EAAWK,KAAK,CAACzC,EAAGmC,EAAMyC,KAC1BxC,EAAWK,KAAK,CAACmC,EAAYzC,EAAMnC,KACnC6B,EAAKM,EAAOnC,EAAI4E,GAChBA,MAGAxC,EAAWK,KAAK,EAAE,GAAI,IACtBL,EAAWK,KAAK,EAAE,GAAI,KAE1BL,EAAWK,KAAK,EAAE,GAAI,IACtBL,EAAWK,KAAK,EAAE,GAAI,IAU1B,OARAL,EAAWK,KAAK,EAAE,GAAI,IACtBL,EAAWK,KAAK,EAAE,GAAI,IACtBL,EAAWK,KAAK,EAAE,GAAI,IACtBL,EAAWK,KAAK,EAAE,GAAI,IAEtBL,EAAWK,KAAK,CAACmC,EAAYzC,EAAMwC,KACnCvC,EAAWK,KAAK,CAACkC,EAAUxC,EAAMyC,KACjC/C,EAAKM,EAAOyC,EAAYD,GACjBC,EAlCUE,CAAe3C,EAAOuC,EAAYC,EAAUvC,GACzDwB,EAAWzB,EAAOuC,EAAYE,EAAa,EAAGxC,GAC9CwB,EAAWzB,EAAOyC,EAAa,EAAGD,EAAUvC,IAfhDwB,CAAWzB,EAAO,EAAGA,EAAME,OAAS,EAAGD,GAKhC,CAACA,EAAYD,IC6BT4C,EAlCY,SAAC5C,EAAMS,EAAeC,EAAaC,GAAoB,IAE1E9C,EAFyE,EAC5CyE,EAAUtC,GADkC,mBACtEC,EADsE,KAC3DW,EAD2D,KAI7E,IAAM/C,EAAI,EAAGA,EAAIoC,EAAWC,OAAS,EAAGrC,IAAK,CAC3C,IAAMgF,EAAiBhF,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CiF,EAAOhC,SAASC,uBAAuB,OAC7C,IAAqB,IAAlB8B,GAAwB,2BACvB,IAAM9D,EAASlB,EAAI,IAAM,EAAK8C,EAAiBD,EADxB,cAEYT,EAAWpC,GAFvB,GAEhBkF,EAFgB,KAEHC,EAFG,KAGvB,IAAoB,IAAjBD,EACC,iBAEJ,IAAM7B,EAAc4B,EAAKC,GAAajE,MAChCqC,EAAc2B,EAAKE,GAAalE,MACtCsC,YAAW,WACPF,EAAYG,gBAAkBtC,EAC9BoC,EAAYE,gBAAkBtC,IAChClB,EAAI4C,GAXiB,GAInB,cASH,6CAC6BR,EAAWpC,GADxC,GACMoF,EADN,KACgB3B,EADhB,KAED,IAAkB,IAAd2B,EACA,iBAEJ,IAAMC,EAAWJ,EAAKG,GAAUnE,MAChCsC,YAAW,WACP8B,EAAS3B,OAAT,UAAqBD,EAArB,QACFzD,EAAI4C,GARL,GAGG,SAQZ,MAAO,CAACG,EAAY/C,ICbHsF,EApBA,SAACvC,EAAYwC,EAAiB3C,EAAeC,GAE5D,IAAIL,EAFwE,aAItE,IACMgD,EADOvC,SAASC,uBAAuB,OACvBV,GAAGvB,MACzBsC,YAAW,WACTiC,EAAShC,gBAAkB,eAC1B+B,EAAiB3C,EAAmB,GAAFJ,IALvC,IAAIA,EAAE,EAAEA,EAAEO,EAAYV,OAAOG,IAAK,IAQlC,IAXwE,eAWhE4B,GACN,IACMoB,EADOvC,SAASC,uBAAuB,OACvBkB,GAAGnD,MACzBsC,YAAW,WACTiC,EAAShC,gBAAkBX,IACxB0C,EAAiB3C,EAAmB,GAAFJ,EAAS,GAAF4B,IALxCA,EAAE,EAAEA,EAAErB,EAAYV,OAAO+B,IAAK,EAA9BA,IC0HDqB,E,4MAvHfC,MAAQ,CACJvD,MAAM,GACNS,eAAe,IACfnC,MAAM,IACNkF,iBAAgB,G,EAEpBC,WAAaC,OAAOC,W,EACpBjG,YAAcgG,OAAOE,Y,EAGrBlD,aAAe,O,EACfC,eAAgB,M,EAMhBlD,WAAa,WACT,IAAMoG,EAAYC,EAAiB,EAAKpG,YAAY,EAAK6F,MAAMjF,OAC/D,EAAKyF,SAAS,CAAC/D,MAAM6D,K,EAEzB9D,WAAa,WACTiE,QAAQC,QAAQ,EAAKF,SAAS,CAACP,iBAAgB,KAAQU,MAAK,WAAK,IAAD,EACrB1D,EAAoB,EAAK+C,MAAMvD,MAAM,EAAKuD,MAAM9C,eAAe,EAAKC,aAAa,EAAKC,gBADjE,mBACrDC,EADqD,KACzCwC,EADyC,KAE5De,EAAavD,EAAYwC,EAAiB,EAAKG,MAAM9C,eAAe,EAAKC,cACzE,IAAM0D,EAAQhB,EAAiB,EAAKG,MAAM9C,eAAsC,EAAnBG,EAAYV,OAAS,GAClFkB,YAAW,WACP,EAAK2C,SAAS,CAACP,iBAAgB,MACjCY,O,EAGV5C,cAAgB,WACZwC,QAAQC,QAAQ,EAAKF,SAAS,CAACP,iBAAgB,KAAQU,MAAK,WAAK,IAAD,EACrBxC,EAAuB,EAAK6B,MAAMvD,MAAM,EAAKuD,MAAM9C,eAAe,EAAKC,aAAa,EAAKC,gBADpE,mBACrDC,EADqD,KACzCwC,EADyC,KAE5De,EAAavD,EAAYwC,EAAiB,EAAKG,MAAM9C,eAAe,EAAKC,cACzE,IAAM0D,EAAQhB,EAAiB,EAAKG,MAAM9C,eAAsC,EAAnBG,EAAYV,OAAS,GAClFkB,YAAW,WACP,EAAK2C,SAAS,CAACP,iBAAgB,MACjCY,O,EAMVC,cAAgB,WACZL,QAAQC,QAAQ,EAAKF,SAAS,CAACP,iBAAgB,KAAQU,MAAK,WAAK,IAAD,EACrBI,EAAuB,EAAKf,MAAMvD,MAAM,EAAKuD,MAAM9C,eAAe,EAAKC,aAAa,EAAKC,gBADpE,mBACrDC,EADqD,KACzCwC,EADyC,KAE5De,EAAavD,EAAYwC,EAAiB,EAAKG,MAAM9C,eAAe,EAAKC,cACzE,IAAM0D,EAAQhB,EAAiB,EAAKG,MAAM9C,eAAsC,EAAnBG,EAAYV,OAAS,GAClFkB,YAAW,WACP,EAAK2C,SAAS,CAACP,iBAAgB,MACjCY,O,EAIVG,UAAY,WACRP,QAAQC,QAAQ,EAAKF,SAAS,CAACP,iBAAgB,KAAQU,MAAK,WAAK,IAAD,EACrBM,EAAmB,EAAKjB,MAAMvD,MAAM,EAAKuD,MAAM9C,eAAe,EAAKC,aAAa,EAAKC,gBADhE,mBACrDC,EADqD,KACzCwC,EADyC,KAE5De,EAAavD,EAAYwC,EAAiB,EAAKG,MAAM9C,eAAe,EAAKC,cACzE,IAAM0D,EAAQhB,EAAiB,EAAKG,MAAM9C,eAAsC,EAAnBG,EAAYV,OAAS,GAClFkB,YAAW,WACP,EAAK2C,SAAS,CAACP,iBAAgB,MACjCY,O,EAIV9B,UAAY,WACR0B,QAAQC,QAAQ,EAAKF,SAAS,CAACP,iBAAgB,KAAQU,MAAK,WAAK,IAAD,EACrBtB,EAAmB,EAAKW,MAAMvD,MAAM,EAAKuD,MAAM9C,eAAe,EAAKC,aAAa,EAAKC,gBADhE,mBACrDC,EADqD,KACzCwC,EADyC,KAE5De,EAAavD,EAAYwC,EAAiB,EAAKG,MAAM9C,eAAe,EAAKC,cACzE,IAAM0D,EAAQhB,EAAiB,EAAKG,MAAM9C,eAAsC,EAAnBG,EAAYV,OAAS,GAClFkB,YAAW,WACP,EAAK2C,SAAS,CAACP,iBAAgB,MACjCY,O,EAIVK,eAAiB,SAACC,GACd,IAAMC,EAAWD,EAAME,OAAOtG,MAC9B,EAAKyF,SAAS,CAACtD,eAAekE,K,EAElCE,oBAAsB,SAACH,GACnB,IAAMI,EAAWJ,EAAME,OAAOtG,MAC9B0F,QAAQC,QAAQ,EAAKF,SAAS,CAACzF,MAAMwG,KAAYZ,MAAK,kBAAI,EAAKzG,iB,kEArE/DsH,KAAKtH,e,+BAwEA,IAAD,OACEuC,EAAQ+E,KAAKxB,MAAMvD,MACzB,OACI,6BACI,kBAAC,EAAD,CACAd,IAAO6F,KAAKxB,MAAMrE,IAClBC,IAAK4F,KAAKxB,MAAMpE,IAChBb,MAAOyG,KAAKxB,MAAMjF,MAClBc,aAAc2F,KAAKF,oBACnBpG,QAAWsG,KAAKN,eAChB7F,QAAWmG,KAAKtH,WAChBc,QAAWwG,KAAKxB,MAAM9C,eACtB5B,eAAkBkG,KAAKxB,MAAMC,gBAC7BnE,kBAAqB0F,KAAKhF,WAC1BR,qBAAwBwF,KAAKvD,cAC7BlC,oBAAuByF,KAAKV,cAC5B7E,iBAAoBuF,KAAKR,UACzB9E,iBAAoBsF,KAAKzC,YAEzB,yBAAKlE,UAAU,aACV4B,EAAMgF,KAAI,SAAC1G,EAAM2G,GAAP,OACX,yBAAK7G,UAAU,MAAM8G,IAAKD,EAC1BnG,MACI,CAACqG,MAAM,GAAD,QAAK,EAAK1B,WAAW,KAAK,EAAKF,MAAMjF,MAArC,MAAgDiD,OAAO,GAAD,OAAIjD,EAAJ,MAAc+C,gBAAgB,EAAKX,yB,GA/GzF0E,aCEXC,E,uKATX,OACE,6BACI,kBAAC,EAAD,W,GAJQD,aCSEE,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9E,SAAS+E,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75c32c93.chunk.js","sourcesContent":["\nconst ResetArray = (totalHeight,noOfBars)=> {\n    let randArray = []\n    // console.log(this.totalHeight)\n    // console.log(this.totalWidth)\n    // console.log(this.noOfBars)\n    for(let i=0;i<noOfBars;i++){\n        randArray = randArray.concat(Math.floor(Math.random()*(totalHeight-200))+150);\n    }\n    return randArray;\n}\n\nexport default ResetArray;","import React from 'react';\nimport './AnimationSpeed.css'\n\nconst AnimationSpeed = (props)=>{\n    return(\n        <select className='AnimationSpeed'\n        disabled={props.disabled}\n        value={props.initual} onChange={props.changed} >\n            <option value=\"3\">0.25</option>\n            <option value=\"2\">0.5(Prefered For MergeSort)</option>\n            <option value=\"1\">1</option>\n            <option value=\"0.5\">2</option>\n            <option value=\"0.25\">3(Prefered For BubleSort)</option>\n            \n        </select>\n    )\n}\nexport default AnimationSpeed;","import React from 'react';\nimport './SortController.css'\nimport AnimationSpeed from './AnimationSpeed/AnimationSpeed';\n\nconst SortController = (props)=>{\n        return(<div className = \"nav\">\n                    <button className = \"reset\" onClick = {props.clicked} disabled={props.disableButtons}>Reset Array</button>\n                    <div className='nav-components'>\n                    <p style={{color:\"white\"}}>AnimationSpeed</p>\n                    <AnimationSpeed \n                    disabled = {props.disableButtons}\n                    changed={props.changed} \n                    initual={props.initual} />\n                    </div>\n                    <div className='nav-components'>\n                    <p style={{color:\"white\"}}>No Of Bars</p>\n                    <input \n                    className= \"Input\"\n                    id=\"changeSize\"\n                    type=\"range\"\n                    min=\"20\"\n                    max=\"200\"\n                    onChange={props.sliderchange}\n                    disabled={props.disableButtons}\n                    />\n                    <p style={{color:\"white\"}}>{props.value}</p>\n                    </div>\n                    \n                    <div >\n                        <button className = \"nav-item\" onClick = {props.BubbleSortclicked} disabled={props.disableButtons}>Buble Sort</button>\n                        <button className = \"nav-item\" onClick = {props.InsertonSortclicked} disabled={props.disableButtons}>Insertion Sort</button>\n                        <button className = \"nav-item\" onClick = {props.SelectionSortclicked} disabled={props.disableButtons}>Selection Sort</button>\n                        <button className = \"nav-item\" onClick = {props.MergeSortclicked} disabled={props.disableButtons}>Merge Sort</button>\n                        <button className = \"nav-item\" onClick = {props.QuickSortclicked} disabled={props.disableButtons}>Quick Sort</button>\n                \n            </div>\n        </div> \n        )\n}\n\nexport default SortController;","const BubbleSort = (array) => {\n    let animations = [];\n    if (array.length <= 1) return array;\n    Sorthelper(array, animations);\n    return [animations,array];\n}\n\nfunction Sorthelper(unsorted,animations){\n    let N = unsorted.length;\n    for(let i=0;i<N-1;i++){\n        for(let j=0;j<N-1-i;j++){\n            // to show color change to show we are comparing\n            animations.push([j,j+1]);\n            // once shown we have to revert back so push again\n            animations.push([j,j+1]);\n            if(unsorted[j]>unsorted[j+1]){\n                animations.push([j,unsorted[j+1]]);\n                animations.push([j+1,unsorted[j]]);\n                swap(unsorted,j,j+1);\n            }\n            else{\n                animations.push([-1,-1]);\n                animations.push([-1,-1]);\n            }\n        }\n    }\n}\n// swapping the 2 elements\n\nfunction swap(auxillaryArray, a, b) {\n    let temp = auxillaryArray[a];\n    auxillaryArray[a] = auxillaryArray[b];\n    auxillaryArray[b] = temp;\n}\n\nexport default BubbleSort;","import BubbleSort from '../../Algorithms/BubbleSort';\n\nconst BubbleSortAnimation = (array,animationSpeed,primarycolor,secondarycolor) =>{\n    const [animations,sortedArray] = BubbleSort(array);\n    let i;\n    for (i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('bar');\n      // sets of 4 first 2 shows compare the next two swaps\n      const isColorChange = (i % 4 !== 2 && i%4 !==3);\n      if (isColorChange) {\n        const [barOneIdx,barTwoIdx] = animations[i];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        const color = i % 4 === 0 ? secondarycolor : primarycolor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        },i*animationSpeed); // everyloop while wait for additinal 10 sec than the previous loop\n      } \n      else {\n        const [barOneIdx, newHeight] = animations[i];\n        // else triggered\n        // -1 means no swap took place so skip\n        if(barOneIdx===-1){\n          continue;\n        }\n        else{\n          setTimeout(() => {\n            const barOneStyle = bars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          },i*animationSpeed);\n        }\n        \n      }\n    }\n    return [sortedArray,i];\n    }\n\n    export default BubbleSortAnimation;","const SelectionSort = (array) => {\n    let animations  = [];\n    if(array.length<=1)return array;\n    sortHelper(array,animations);\n    //const jsSortedArray = array.slice().sort((a, b) => a - b);\n    //console.log(\"sort works correctly? \",AreEqual(jsSortedArray, array));\n    return [animations,array];\n}\n//SelectionSort([7,2,1,6]);\nfunction sortHelper(array,animations) {\n\n    for(let i=0;i<array.length-1;i++){\n        \n        let min = i;\n        for(let j=i+1;j<array.length;j++){\n            if(i>0)animations.push([1,i-1,i]);\n            animations.push([2,j,min]);\n            animations.push([3,j,min]);\n           if(array[j]<array[min]){\n               min = j;\n           }\n        }\n        animations.push([4,i,array[min]]);\n        animations.push([4,min,array[i]]);\n        swap(array,i,min)\n    }\n\n}  \nfunction swap(array,a,b){\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}\n\n//to check the algorithm\n// function AreEqual(jsSortedArray, array) {\n//     if (jsSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < jsSortedArray.length; i++) {\n//       if (jsSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\n\nexport default SelectionSort;","import SelectionSort from '../../Algorithms/SelectionSort';\n\nconst SelectionSortAnimation = (array,animationSpeed,primarycolor,secondarycolor) => {\n    const [animations,sortedArray] = SelectionSort(array);\n    let i;\n    for(i=0;i<animations.length;i++){\n      const bars = document.getElementsByClassName('bar');\n      const swap = animations[i][0];\n      // 1 is color change of the ith bar\n      // 2 and 3 are color change of the compare \n      // 4 is the swap taking place\n      if(swap===1){\n        const barOneIdx = animations[i][1];\n        const barTwoIdx = animations[i][2];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = primarycolor;\n          barTwoStyle.backgroundColor = 'yellow';\n        }, i*animationSpeed);\n      }\n      else if(swap===2 || swap===3){\n        const [temp ,barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        const color = temp === 2 ? secondarycolor : primarycolor;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i*animationSpeed);\n      }\n      else{\n        const barIdx = animations[i][1];\n        const newHeight = animations[i][2];\n            setTimeout(() => {\n              const barStyle = bars[barIdx].style;\n              barStyle.height = `${newHeight}px`;\n            }, i*animationSpeed);\n      }\n    }\n    return [sortedArray,i]\n    }\n\nexport default SelectionSortAnimation;","const MergeSort = (array) => {\n  let animations = [];\n  if (array.length <= 1) return array;\n  const unsorted = array.slice();\n  Sorthelper(array, 0, array.length - 1, unsorted, animations);\n  return [animations,array];\n}\n\nfunction Sorthelper(array,left,right,unsorted,animations) {\n  if (left === right) return;\n  const middle = Math.floor((left + right) / 2);\n  Sorthelper(unsorted, left, middle, array, animations);\n  Sorthelper(unsorted, middle + 1, right, array, animations);\n  Mergehelper(array, left, middle, right, unsorted, animations);\n}\nfunction Mergehelper(array,left,middle,right,unsorted,animations){\n  let k = left;\n  let i = left;\n  let j = middle + 1;\n  while (i <= middle && j <= right) {\n    // to show color change to show we are comparing\n    animations.push([i, j]);\n    // once shown we have to revert back so push again\n    animations.push([i, j]);\n    if (unsorted[i] <= unsorted[j]) {\n      // push the height of ith element to swap\n      animations.push([k, unsorted[i]]);\n      array[k++] = unsorted[i++];\n    } else {\n      // push the height of jth element to swap\n      animations.push([k, unsorted[j]]);\n      array[k++] = unsorted[j++];\n    }\n  }\n  while (i <= middle) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, unsorted[i]]);\n    array[k++] = unsorted[i++];\n  }\n  while (j <= right) {\n    animations.push([j, j]);  \n    animations.push([j, j]);\n    animations.push([k, unsorted[j]]);\n    array[k++] = unsorted[j++];\n  }\n}\n\nexport default MergeSort;","import MergeSort from '../../Algorithms/MergeSort';\n\nconst MergeSortAnimation = (array,animationSpeed,primarycolor,secondarycolor) => {\n    const [animations,sortedArray] = MergeSort(array);\n      let i;\n      for (i = 0; i < animations.length; i++) {\n        const bars = document.getElementsByClassName('bar');\n        const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = bars[barOneIdx].style;\n            const barTwoStyle = bars[barTwoIdx].style;\n            const color = i % 3 === 0 ? secondarycolor : primarycolor;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i*animationSpeed);\n          } \n          else {\n            const [barIdx, newHeight] = animations[i];\n            setTimeout(() => {\n              const barStyle = bars[barIdx].style;\n              barStyle.height = `${newHeight}px`;\n            }, i*animationSpeed);\n          }\n        }\n\n    return [sortedArray,i];\n    }\n\nexport default MergeSortAnimation","const QuickSort = (array) => {\n    let animations  = [];\n    sortHelper(array, 0, array.length - 1, animations);\n    // javascript  sort \n    //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    // to check the sort\n   // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, array));\n    return [animations, array] ;\n}\n\n//QuickSort([7,2,1,6]);\n\nfunction sortHelper(array, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(array, startIndex, endIndex, animations);\n        sortHelper(array, startIndex, pivotIndex - 1, animations);\n        sortHelper(array, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(array, startIndex, endIndex, animations) {\n    let pivot = array[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (array[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, array[pivotIndex]]);\n            animations.push([pivotIndex, array[i]]);\n            swap(array, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, array[endIndex]]);\n    animations.push([endIndex, array[pivotIndex]]);\n    swap(array, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n\n// to check the sort\n// function arraysAreEqual(javaScriptSortedArray, array) {\n//     if (javaScriptSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < javaScriptSortedArray.length; i++) {\n//       if (javaScriptSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\n\nexport default QuickSort;","import QuickSort from '../../Algorithms/QuickSort';\n\nconst QuickSortAnimation = (array,animationSpeed,primarycolor,secondarycolor) => {\n    const [animations,sortedArray] = QuickSort(array);\n    let i;\n    // set of 8 4 compares 2 swaps\n    for ( i = 0; i < animations.length - 1; i++) {\n      const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n      const Bars = document.getElementsByClassName('bar');\n      if(isColorChange === true) {\n          const color = (i % 6 === 0) ? secondarycolor : primarycolor;\n          const [barOneIndex, barTwoIndex] = animations[i];\n          if(barOneIndex === -1) {\n              continue;\n          }\n          const barOneStyle = Bars[barOneIndex].style;\n          const barTwoStyle = Bars[barTwoIndex].style;\n          setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n          },i * animationSpeed);\n      }\n      else {\n          const [barIndex, newHeight] = animations[i];\n          if (barIndex === -1) {\n              continue;\n          }\n          const barStyle = Bars[barIndex].style;\n          setTimeout(() => {\n              barStyle.height = `${newHeight}px`;\n          },i * animationSpeed);  \n      }\n  }\n  return [sortedArray,i]\n  }\n\nexport default QuickSortAnimation","const showsorted = (sortedArray,animationsLength,animationSpeed,primarycolor)=> {\n    // to show the green traverse at the end\n    let j;\n        for(j=0;j<sortedArray.length;j++){\n          const bars = document.getElementsByClassName('bar');\n          const barSytle = bars[j].style;\n          setTimeout(()=>{\n            barSytle.backgroundColor = 'lightgreen';\n          },(animationsLength*animationSpeed)+(j*10));// wait for the previous loop to end so additional i*10\n        }\n        // making it aqua again\n        for(let k=0;k<sortedArray.length;k++){\n          const bars = document.getElementsByClassName('bar');\n          const barSytle = bars[k].style;\n          setTimeout(()=>{\n            barSytle.backgroundColor = primarycolor;\n            },(animationsLength*animationSpeed)+(j*10)+(k*10));\n        } \n    }\n\n    export default showsorted;","import React,{Component} from 'react';\nimport './SortBuilder.css'\nimport ResetRandomArray from '../../Components/SortVisualization/ResetArray'\nimport SortController from '../../Components/SortController/SortController';\nimport BubbleSortAnimation from '../../Components/SortVisualization/BubleSortAnimation'\nimport SelectionSortAnimation from '../../Components/SortVisualization/SelectionSortAnimation'\nimport InsertionSortAnimation from '../../Components/SortVisualization/SelectionSortAnimation'\nimport MergesortAnimation from '../../Components/SortVisualization/MergeSortAnimations'\nimport QuickSortAnimation from '../../Components/SortVisualization/QuickSortAnimation'\nimport EndAnimation from   '../../Components/SortVisualization/endAnimations';\n\n\nclass SortBuilder extends Component{\n\nstate = {\n    array:[],\n    animationSpeed:0.25,\n    value:100,\n    disabledButtons:false\n}\ntotalWidth = window.innerWidth;\ntotalHeight = window.innerHeight;\n// noOfBars = parseInt((this.totalWidth-600)/4);\n// animationSpeed = 0.1\nprimarycolor = \"aqua\"\nsecondarycolor= \"red\"\n\ncomponentDidMount(){\n    this.ResetArray();\n}\n\nResetArray = ()=>{\n    const RandArray = ResetRandomArray(this.totalHeight,this.state.value)\n    this.setState({array:RandArray})\n}\nBubbleSort = () => {\n    Promise.resolve(this.setState({disabledButtons:true})).then(()=>{\n        const [sortedArray,animationsLength] = BubbleSortAnimation(this.state.array,this.state.animationSpeed,this.primarycolor,this.secondarycolor);\n        EndAnimation(sortedArray,animationsLength,this.state.animationSpeed,this.primarycolor)\n        const time = (animationsLength*this.state.animationSpeed) + (sortedArray.length*2*10)\n        setTimeout(()=>{\n            this.setState({disabledButtons:false})\n        },time)\n    })\n}\nSelectionSort = () =>{\n    Promise.resolve(this.setState({disabledButtons:true})).then(()=>{\n        const [sortedArray,animationsLength] = SelectionSortAnimation(this.state.array,this.state.animationSpeed,this.primarycolor,this.secondarycolor);\n        EndAnimation(sortedArray,animationsLength,this.state.animationSpeed,this.primarycolor)\n        const time = (animationsLength*this.state.animationSpeed) + (sortedArray.length*2*10)\n        setTimeout(()=>{\n            this.setState({disabledButtons:false})\n        },time)\n    })\n    \n    \n}\n\nInsertionSort = () =>{\n    Promise.resolve(this.setState({disabledButtons:true})).then(()=>{\n        const [sortedArray,animationsLength] = InsertionSortAnimation(this.state.array,this.state.animationSpeed,this.primarycolor,this.secondarycolor);\n        EndAnimation(sortedArray,animationsLength,this.state.animationSpeed,this.primarycolor)\n        const time = (animationsLength*this.state.animationSpeed) + (sortedArray.length*2*10)\n        setTimeout(()=>{\n            this.setState({disabledButtons:false})\n        },time)\n    })\n}\n\nMegreSort = ()=>{\n    Promise.resolve(this.setState({disabledButtons:true})).then(()=>{\n        const [sortedArray,animationsLength] = MergesortAnimation(this.state.array,this.state.animationSpeed,this.primarycolor,this.secondarycolor);\n        EndAnimation(sortedArray,animationsLength,this.state.animationSpeed,this.primarycolor)\n        const time = (animationsLength*this.state.animationSpeed) + (sortedArray.length*2*10)\n        setTimeout(()=>{\n            this.setState({disabledButtons:false})\n        },time)\n    })\n}\n\nQuickSort = () =>{\n    Promise.resolve(this.setState({disabledButtons:true})).then(()=>{\n        const [sortedArray,animationsLength] = QuickSortAnimation(this.state.array,this.state.animationSpeed,this.primarycolor,this.secondarycolor);\n        EndAnimation(sortedArray,animationsLength,this.state.animationSpeed,this.primarycolor)\n        const time = (animationsLength*this.state.animationSpeed) + (sortedArray.length*2*10)\n        setTimeout(()=>{\n            this.setState({disabledButtons:false})\n        },time)\n    })\n}\n\nchangedHandler = (event) =>{\n    const newspeed = event.target.value\n    this.setState({animationSpeed:newspeed})\n}\nsliderchangeHandler = (event) =>{\n    const newvalue = event.target.value\n    Promise.resolve(this.setState({value:newvalue})).then(()=>this.ResetArray())\n\n}\nrender(){\n    const array = this.state.array;\n    return(\n        <div>\n            <SortController \n            min = {this.state.min}\n            max={this.state.max}\n            value={this.state.value}\n            sliderchange={this.sliderchangeHandler}\n            changed = {this.changedHandler}\n            clicked = {this.ResetArray}\n            initual = {this.state.animationSpeed} \n            disableButtons = {this.state.disabledButtons}           \n            BubbleSortclicked = {this.BubbleSort}\n            SelectionSortclicked = {this.SelectionSort}\n            InsertonSortclicked = {this.InsertionSort}\n            MergeSortclicked = {this.MegreSort}\n            QuickSortclicked = {this.QuickSort}\n            />\n            <div className=\"container\">\n                {array.map((value,index)=>(\n                <div className=\"bar\" key={index}\n                style={\n                    {width:`${(this.totalWidth-600)/this.state.value}px`, height:`${value}px`,backgroundColor:this.primarycolor}\n                }></div>\n                ))}\n            </div>\n        </div>\n        \n    )\n}\n}\n\nexport default SortBuilder;","import React, { Component } from 'react';\nimport SortBuilder from './Containers/SortBuilder/SortBuilder'\n// import SortController from './Components/SortController/SortController';\nclass App extends Component{\n  render(){\n    return (\n      <div>\n          <SortBuilder /> \n      </div>\n        \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}