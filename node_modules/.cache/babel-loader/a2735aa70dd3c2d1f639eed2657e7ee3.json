{"ast":null,"code":"var MergeSort=function MergeSort(array){var animations=[];if(array.length<=1)return array;var unsorted=array.slice();Sorthelper(array,0,array.length-1,unsorted,animations);return[animations,array];};function Sorthelper(array,left,right,unsorted,animations){if(left===right)return;var middle=Math.floor((left+right)/2);Sorthelper(unsorted,left,middle,array,animations);Sorthelper(unsorted,middle+1,right,array,animations);Mergehelper(array,left,middle,right,unsorted,animations);}function Mergehelper(array,left,middle,right,unsorted,animations){var k=left;var i=left;var j=middle+1;while(i<=middle&&j<=right){// to show color change to show we are comparing\nanimations.push([i,j]);// once shown we have to revert back so push again\nanimations.push([i,j]);if(unsorted[i]<=unsorted[j]){// push the height of ith element to swap\nanimations.push([k,unsorted[i]]);array[k++]=unsorted[i++];}else{// push the height of jth element to swap\nanimations.push([k,unsorted[j]]);array[k++]=unsorted[j++];}}while(i<=middle){animations.push([i,i]);animations.push([i,i]);animations.push([k,unsorted[i]]);array[k++]=unsorted[i++];}while(j<=right){animations.push([j,j]);animations.push([j,j]);animations.push([k,unsorted[j]]);array[k++]=unsorted[j++];}}export default MergeSort;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Algorithms/MergeSort.js"],"names":["MergeSort","array","animations","length","unsorted","slice","Sorthelper","left","right","middle","Math","floor","Mergehelper","k","i","j","push"],"mappings":"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","sourcesContent":["const MergeSort = (array) => {\n  let animations = [];\n  if (array.length <= 1) return array;\n  const unsorted = array.slice();\n  Sorthelper(array, 0, array.length - 1, unsorted, animations);\n  return [animations,array];\n}\n\nfunction Sorthelper(array,left,right,unsorted,animations) {\n  if (left === right) return;\n  const middle = Math.floor((left + right) / 2);\n  Sorthelper(unsorted, left, middle, array, animations);\n  Sorthelper(unsorted, middle + 1, right, array, animations);\n  Mergehelper(array, left, middle, right, unsorted, animations);\n}\nfunction Mergehelper(array,left,middle,right,unsorted,animations){\n  let k = left;\n  let i = left;\n  let j = middle + 1;\n  while (i <= middle && j <= right) {\n    // to show color change to show we are comparing\n    animations.push([i, j]);\n    // once shown we have to revert back so push again\n    animations.push([i, j]);\n    if (unsorted[i] <= unsorted[j]) {\n      // push the height of ith element to swap\n      animations.push([k, unsorted[i]]);\n      array[k++] = unsorted[i++];\n    } else {\n      // push the height of jth element to swap\n      animations.push([k, unsorted[j]]);\n      array[k++] = unsorted[j++];\n    }\n  }\n  while (i <= middle) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, unsorted[i]]);\n    array[k++] = unsorted[i++];\n  }\n  while (j <= right) {\n    animations.push([j, j]);  \n    animations.push([j, j]);\n    animations.push([k, unsorted[j]]);\n    array[k++] = unsorted[j++];\n  }\n}\n\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}