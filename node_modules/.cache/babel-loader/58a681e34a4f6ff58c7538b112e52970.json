{"ast":null,"code":"const QuickSort = array => {\n  let animations = [];\n  sortHelper(array, 0, array.length - 1, animations); // javascript  sort \n  //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  // to check the sort\n  // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, array));\n\n  return [animations, array];\n}; //QuickSort([7,2,1,6]);\n\n\nfunction sortHelper(array, startIndex, endIndex, animations) {\n  let pivotIndex;\n\n  if (startIndex < endIndex) {\n    pivotIndex = partitionArray(array, startIndex, endIndex, animations);\n    sortHelper(array, startIndex, pivotIndex - 1, animations);\n    sortHelper(array, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(array, startIndex, endIndex, animations) {\n  let pivot = array[endIndex];\n  let pivotIndex = startIndex;\n\n  for (let i = startIndex; i <= endIndex - 1; i++) {\n    animations.push([i, endIndex]);\n    animations.push([i, endIndex]);\n\n    if (array[i] <= pivot) {\n      //Swap these two heights\n      animations.push([i, array[pivotIndex]]);\n      animations.push([pivotIndex, array[i]]);\n      swap(array, i, pivotIndex);\n      pivotIndex++;\n    } else {\n      animations.push([-1, -1]);\n      animations.push([-1, -1]);\n    }\n\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n  }\n\n  animations.push([-1, -1]);\n  animations.push([-1, -1]);\n  animations.push([-1, -1]);\n  animations.push([-1, -1]); //Swap these two heights\n\n  animations.push([pivotIndex, array[endIndex]]);\n  animations.push([endIndex, array[pivotIndex]]);\n  swap(array, pivotIndex, endIndex);\n  return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n} // to check the sort\n// function arraysAreEqual(javaScriptSortedArray, array) {\n//     if (javaScriptSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < javaScriptSortedArray.length; i++) {\n//       if (javaScriptSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\n\n\nexport default QuickSort;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Algorithms/QuickSort.js"],"names":["QuickSort","array","animations","sortHelper","length","startIndex","endIndex","pivotIndex","partitionArray","pivot","i","push","swap","auxillaryArray","firstIndex","secondIndex","temp"],"mappings":"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","sourcesContent":["const QuickSort = (array) => {\n    let animations  = [];\n    sortHelper(array, 0, array.length - 1, animations);\n    // javascript  sort \n    //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    // to check the sort\n   // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, array));\n    return [animations, array] ;\n}\n\n//QuickSort([7,2,1,6]);\n\nfunction sortHelper(array, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(array, startIndex, endIndex, animations);\n        sortHelper(array, startIndex, pivotIndex - 1, animations);\n        sortHelper(array, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(array, startIndex, endIndex, animations) {\n    let pivot = array[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (array[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, array[pivotIndex]]);\n            animations.push([pivotIndex, array[i]]);\n            swap(array, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, array[endIndex]]);\n    animations.push([endIndex, array[pivotIndex]]);\n    swap(array, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n\n// to check the sort\n// function arraysAreEqual(javaScriptSortedArray, array) {\n//     if (javaScriptSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < javaScriptSortedArray.length; i++) {\n//       if (javaScriptSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\n\nexport default QuickSort;"]},"metadata":{},"sourceType":"module"}