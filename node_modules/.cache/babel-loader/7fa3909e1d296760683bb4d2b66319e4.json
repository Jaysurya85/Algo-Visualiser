{"ast":null,"code":"import MergeSort from '../../Algorithms/MergeSort';\n\nconst MergeSortAnimation = array => {\n  const [animations, sortedArray] = MergeSort(array);\n  let i;\n\n  for (i = 0; i < animations.length; i++) {\n    const bars = document.getElementsByClassName('bar');\n    const isColorChange = i % 3 !== 2;\n\n    if (isColorChange) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = bars[barOneIdx].style;\n      const barTwoStyle = bars[barTwoIdx].style;\n      const color = i % 3 === 0 ? 'red' : 'aqua';\n      setTimeout(() => {\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n      }, i * animationSpeed);\n    } else {\n      const [barIdx, newHeight] = animations[i];\n      setTimeout(() => {\n        const barStyle = bars[barIdx].style;\n        barStyle.height = `${newHeight}px`;\n      }, i * animationSpeed);\n    }\n  }\n\n  return [sortedArray, i];\n};\n\nexport default MergeSortAnimation;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Components/SortVisualization/MergeSortAnimations.js"],"names":["MergeSort","MergeSortAnimation","array","animations","sortedArray","i","length","bars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","animationSpeed","barIdx","newHeight","barStyle","height"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAClC,QAAM,CAACC,UAAD,EAAYC,WAAZ,IAA2BJ,SAAS,CAACE,KAAD,CAA1C;AACE,MAAIG,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,UAAU,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAME,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,KAAhC,CAAb;AACA,UAAMC,aAAa,GAAGL,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACE,QAAIK,aAAJ,EAAmB;AACjB,YAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBT,UAAU,CAACE,CAAD,CAAzC;AACA,YAAMQ,WAAW,GAAGN,IAAI,CAACI,SAAD,CAAJ,CAAgBG,KAApC;AACA,YAAMC,WAAW,GAAGR,IAAI,CAACK,SAAD,CAAJ,CAAgBE,KAApC;AACA,YAAME,KAAK,GAAGX,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,KAAd,GAAsB,MAApC;AACAY,MAAAA,UAAU,CAAC,MAAM;AACfJ,QAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,QAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACD,OAHS,EAGPX,CAAC,GAACc,cAHK,CAAV;AAID,KATD,MAUK;AACH,YAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,UAAU,CAACE,CAAD,CAAtC;AACAY,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMK,QAAQ,GAAGf,IAAI,CAACa,MAAD,CAAJ,CAAaN,KAA9B;AACAQ,QAAAA,QAAQ,CAACC,MAAT,GAAmB,GAAEF,SAAU,IAA/B;AACD,OAHS,EAGPhB,CAAC,GAACc,cAHK,CAAV;AAID;AACF;;AAEL,SAAO,CAACf,WAAD,EAAaC,CAAb,CAAP;AACC,CA1BL;;AA4BA,eAAeJ,kBAAf","sourcesContent":["import MergeSort from '../../Algorithms/MergeSort';\n\nconst MergeSortAnimation = (array) => {\n    const [animations,sortedArray] = MergeSort(array);\n      let i;\n      for (i = 0; i < animations.length; i++) {\n        const bars = document.getElementsByClassName('bar');\n        const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = bars[barOneIdx].style;\n            const barTwoStyle = bars[barTwoIdx].style;\n            const color = i % 3 === 0 ? 'red' : 'aqua';\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i*animationSpeed);\n          } \n          else {\n            const [barIdx, newHeight] = animations[i];\n            setTimeout(() => {\n              const barStyle = bars[barIdx].style;\n              barStyle.height = `${newHeight}px`;\n            }, i*animationSpeed);\n          }\n        }\n\n    return [sortedArray,i];\n    }\n\nexport default MergeSortAnimation"]},"metadata":{},"sourceType":"module"}