{"ast":null,"code":"const BubbleSort = array => {\n  let animations = [];\n  let sortedArray = [];\n  if (array.length <= 1) return array;\n  [animations, sortedArray] = Sorthelper(array, animations);\n  return [animations, sortedArray];\n};\n\nconst Sorthelper = (unsorted, animations) => {\n  let N = unsorted.length;\n\n  for (let i = 0; i < N - 1; i++) {\n    for (let j = 0; j < N - 1 - i; j++) {\n      // to show color change to show we are comparing\n      animations.push([j, j + 1]); // once shown we have to revert back so push again\n\n      animations.push([j, j + 1]);\n\n      if (unsorted[j] > unsorted[j + 1]) {\n        animations.push([j, unsorted[j + 1]]);\n        animations.push([j + 1, unsorted[j]]);\n        swap(unsorted, j, j + 1);\n      } else {\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n      }\n    }\n  }\n\n  return;\n}; // swapping the 2 elements\n\n\nfunction swap(auxillaryArray, a, b) {\n  let temp = auxillaryArray[a];\n  auxillaryArray[a] = auxillaryArray[b];\n  auxillaryArray[b] = temp;\n}\n\nexport default BubbleSort;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Algorithms/BubbleSort.js"],"names":["BubbleSort","array","animations","sortedArray","length","Sorthelper","unsorted","N","i","j","push","swap","auxillaryArray","a","b","temp"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,KAAD,IAAW;AAC1B,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIF,KAAK,CAACG,MAAN,IAAgB,CAApB,EAAuB,OAAOH,KAAP;AACvB,GAACC,UAAD,EAAYC,WAAZ,IAA2BE,UAAU,CAACJ,KAAD,EAAQC,UAAR,CAArC;AACA,SAAO,CAACA,UAAD,EAAYC,WAAZ,CAAP;AACH,CAND;;AAQA,MAAME,UAAU,GAAG,CAACC,QAAD,EAAUJ,UAAV,KAAwB;AACvC,MAAIK,CAAC,GAAGD,QAAQ,CAACF,MAAjB;;AACA,OAAI,IAAII,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,CAAC,GAAC,CAAhB,EAAkBC,CAAC,EAAnB,EAAsB;AAClB,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,CAAC,GAAC,CAAF,GAAIC,CAAlB,EAAoBC,CAAC,EAArB,EAAwB;AACpB;AACAP,MAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAD,EAAGA,CAAC,GAAC,CAAL,CAAhB,EAFoB,CAGpB;;AACAP,MAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAD,EAAGA,CAAC,GAAC,CAAL,CAAhB;;AACA,UAAGH,QAAQ,CAACG,CAAD,CAAR,GAAYH,QAAQ,CAACG,CAAC,GAAC,CAAH,CAAvB,EAA6B;AACzBP,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAD,EAAGH,QAAQ,CAACG,CAAC,GAAC,CAAH,CAAX,CAAhB;AACAP,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAC,GAAC,CAAH,EAAKH,QAAQ,CAACG,CAAD,CAAb,CAAhB;AACAE,QAAAA,IAAI,CAACL,QAAD,EAAUG,CAAV,EAAYA,CAAC,GAAC,CAAd,CAAJ;AACH,OAJD,MAKI;AACAP,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAhB;AACAR,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,CAAhB;AACH;AACJ;AACJ;;AACD;AACH,CApBD,C,CAqBA;;;AAEA,SAASC,IAAT,CAAcC,cAAd,EAA8BC,CAA9B,EAAiCC,CAAjC,EAAoC;AAChC,MAAIC,IAAI,GAAGH,cAAc,CAACC,CAAD,CAAzB;AACAD,EAAAA,cAAc,CAACC,CAAD,CAAd,GAAoBD,cAAc,CAACE,CAAD,CAAlC;AACAF,EAAAA,cAAc,CAACE,CAAD,CAAd,GAAoBC,IAApB;AACH;;AAED,eAAef,UAAf","sourcesContent":["const BubbleSort = (array) => {\n    let animations = [];\n    let sortedArray = []\n    if (array.length <= 1) return array;\n    [animations,sortedArray] = Sorthelper(array, animations);\n    return [animations,sortedArray];\n}\n\nconst Sorthelper = (unsorted,animations) =>{\n    let N = unsorted.length;\n    for(let i=0;i<N-1;i++){\n        for(let j=0;j<N-1-i;j++){\n            // to show color change to show we are comparing\n            animations.push([j,j+1]);\n            // once shown we have to revert back so push again\n            animations.push([j,j+1]);\n            if(unsorted[j]>unsorted[j+1]){\n                animations.push([j,unsorted[j+1]]);\n                animations.push([j+1,unsorted[j]]);\n                swap(unsorted,j,j+1);\n            }\n            else{\n                animations.push([-1,-1]);\n                animations.push([-1,-1]);\n            }\n        }\n    }\n    return \n}\n// swapping the 2 elements\n\nfunction swap(auxillaryArray, a, b) {\n    let temp = auxillaryArray[a];\n    auxillaryArray[a] = auxillaryArray[b];\n    auxillaryArray[b] = temp;\n}\n\nexport default BubbleSort;"]},"metadata":{},"sourceType":"module"}