{"ast":null,"code":"var QuickSort=function QuickSort(array){var animations=[];sortHelper(array,0,array.length-1,animations);// javascript  sort \n//const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n// to check the sort\n// console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, array));\nreturn[animations,array];};//QuickSort([7,2,1,6]);\nfunction sortHelper(array,startIndex,endIndex,animations){var pivotIndex;if(startIndex<endIndex){pivotIndex=partitionArray(array,startIndex,endIndex,animations);sortHelper(array,startIndex,pivotIndex-1,animations);sortHelper(array,pivotIndex+1,endIndex,animations);}}function partitionArray(array,startIndex,endIndex,animations){var pivot=array[endIndex];var pivotIndex=startIndex;for(var i=startIndex;i<=endIndex-1;i++){animations.push([i,endIndex]);animations.push([i,endIndex]);if(array[i]<=pivot){//Swap these two heights\nanimations.push([i,array[pivotIndex]]);animations.push([pivotIndex,array[i]]);swap(array,i,pivotIndex);pivotIndex++;}else{animations.push([-1,-1]);animations.push([-1,-1]);}animations.push([-1,-1]);animations.push([-1,-1]);}animations.push([-1,-1]);animations.push([-1,-1]);animations.push([-1,-1]);animations.push([-1,-1]);//Swap these two heights\nanimations.push([pivotIndex,array[endIndex]]);animations.push([endIndex,array[pivotIndex]]);swap(array,pivotIndex,endIndex);return pivotIndex;}function swap(auxillaryArray,firstIndex,secondIndex){var temp=auxillaryArray[firstIndex];auxillaryArray[firstIndex]=auxillaryArray[secondIndex];auxillaryArray[secondIndex]=temp;}// to check the sort\n// function arraysAreEqual(javaScriptSortedArray, array) {\n//     if (javaScriptSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < javaScriptSortedArray.length; i++) {\n//       if (javaScriptSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\nexport default QuickSort;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Algorithms/QuickSort.js"],"names":["QuickSort","array","animations","sortHelper","length","startIndex","endIndex","pivotIndex","partitionArray","pivot","i","push","swap","auxillaryArray","firstIndex","secondIndex","temp"],"mappings":"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","sourcesContent":["const QuickSort = (array) => {\n    let animations  = [];\n    sortHelper(array, 0, array.length - 1, animations);\n    // javascript  sort \n    //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    // to check the sort\n   // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, array));\n    return [animations, array] ;\n}\n\n//QuickSort([7,2,1,6]);\n\nfunction sortHelper(array, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(array, startIndex, endIndex, animations);\n        sortHelper(array, startIndex, pivotIndex - 1, animations);\n        sortHelper(array, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(array, startIndex, endIndex, animations) {\n    let pivot = array[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (array[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, array[pivotIndex]]);\n            animations.push([pivotIndex, array[i]]);\n            swap(array, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, array[endIndex]]);\n    animations.push([endIndex, array[pivotIndex]]);\n    swap(array, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n\n// to check the sort\n// function arraysAreEqual(javaScriptSortedArray, array) {\n//     if (javaScriptSortedArray.length !== array.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < javaScriptSortedArray.length; i++) {\n//       if (javaScriptSortedArray[i] !== array[i]) {\n//         return false;\n//       }\n//     }\n//     return true;\n// }\n\nexport default QuickSort;"]},"metadata":{},"sourceType":"module"}