{"ast":null,"code":"const MergeSort = array => {\n  let animations = [];\n  if (array.length <= 1) return array;\n  const unsorted = array.slice();\n  Sorthelper(array, 0, array.length - 1, unsorted, animations);\n  return [animations, array];\n};\n\nfunction Sorthelper(array, left, right, unsorted, animations) {\n  if (left === right) return;\n  const middle = Math.floor((left + right) / 2);\n  Sorthelper(unsorted, left, middle, array, animations);\n  Sorthelper(unsorted, middle + 1, right, array, animations);\n  Mergehelper(array, left, middle, right, unsorted, animations);\n}\n\nfunction Mergehelper(array, left, middle, right, unsorted, animations) {\n  let k = left;\n  let i = left;\n  let j = middle + 1;\n\n  while (i <= middle && j <= right) {\n    // to show color change to show we are comparing\n    animations.push([i, j]); // once shown we have to revert back so push again\n\n    animations.push([i, j]);\n\n    if (unsorted[i] <= unsorted[j]) {\n      // push the height of ith element to swap\n      animations.push([k, unsorted[i]]);\n      array[k++] = unsorted[i++];\n    } else {\n      // push the height of jth element to swap\n      animations.push([k, unsorted[j]]);\n      array[k++] = unsorted[j++];\n    }\n  }\n\n  while (i <= middle) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, unsorted[i]]);\n    array[k++] = unsorted[i++];\n  }\n\n  while (j <= right) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, unsorted[j]]);\n    array[k++] = unsorted[j++];\n  }\n}\n\nexport default MergeSort;","map":{"version":3,"sources":["/home/jaysurya/Desktop/web development/react projects/sorting-visualiser/src/Algorithms/MergeSort.js"],"names":["MergeSort","array","animations","length","unsorted","slice","Sorthelper","left","right","middle","Math","floor","Mergehelper","k","i","j","push"],"mappings":"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","sourcesContent":["const MergeSort = (array) => {\n  let animations = [];\n  if (array.length <= 1) return array;\n  const unsorted = array.slice();\n  Sorthelper(array, 0, array.length - 1, unsorted, animations);\n  return [animations,array];\n}\n\nfunction Sorthelper(array,left,right,unsorted,animations) {\n  if (left === right) return;\n  const middle = Math.floor((left + right) / 2);\n  Sorthelper(unsorted, left, middle, array, animations);\n  Sorthelper(unsorted, middle + 1, right, array, animations);\n  Mergehelper(array, left, middle, right, unsorted, animations);\n}\nfunction Mergehelper(array,left,middle,right,unsorted,animations){\n  let k = left;\n  let i = left;\n  let j = middle + 1;\n  while (i <= middle && j <= right) {\n    // to show color change to show we are comparing\n    animations.push([i, j]);\n    // once shown we have to revert back so push again\n    animations.push([i, j]);\n    if (unsorted[i] <= unsorted[j]) {\n      // push the height of ith element to swap\n      animations.push([k, unsorted[i]]);\n      array[k++] = unsorted[i++];\n    } else {\n      // push the height of jth element to swap\n      animations.push([k, unsorted[j]]);\n      array[k++] = unsorted[j++];\n    }\n  }\n  while (i <= middle) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, unsorted[i]]);\n    array[k++] = unsorted[i++];\n  }\n  while (j <= right) {\n    animations.push([j, j]);  \n    animations.push([j, j]);\n    animations.push([k, unsorted[j]]);\n    array[k++] = unsorted[j++];\n  }\n}\n\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}